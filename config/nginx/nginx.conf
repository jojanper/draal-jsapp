worker_processes 2;

events {
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # "Max clients" is also limited by the number of socket connections available on the system (~64k)
    worker_connections 1024;

    # essential for linux, optmized to serve many clients with each thread
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;
}

http {
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    sendfile on;

    include mime.types;
    default_type application/octet-stream;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 65;

    # Number of requests a client can make over the keep-alive connection.
    keepalive_requests 10000;

    # Allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # Send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 10;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 2;

    proxy_read_timeout 200;

    # Compression. Reduces the amount of data that needs to be transferred over the network
    gzip on;
    #gzip_static on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
    application/x-javascript application/xml
    application/atom+xml text/javascript;
    gzip_disable "MSIE [1-6]\.";
    proxy_next_upstream error;

    server {
        listen 80;

        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        # Make sure static assets (CSS, JS files, images, etc) are handled in Nginx level
        location /css/ {
            alias /draaljs-app/public/css/;
            expires 30d;
        }
        location /fonts/ {
            alias /draaljs-app/public/fonts/;
            expires 30d;
        }
        location /img/ {
            alias /draaljs-app/public/img/;
            expires 30d;
        }
        location /js/ {
            alias /draaljs-app/public/js/;
            expires 30d;
        }
        location /favicon.ico {
            alias /draaljs-app/public/img/favicon.ico;
            expires 30d;
        }

        # The application handles only business logic related requests
        location / {
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_pass         http://web:3008;
            proxy_redirect     off;
        }
    }
}
